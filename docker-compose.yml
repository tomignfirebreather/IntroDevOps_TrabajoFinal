services:
  db:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - ./dev.env
    environment:
      - POSTGRES_USER=${SQL_USER:-devuser}
      - POSTGRES_PASSWORD=${SQL_PASSWORD:-secret}
      - POSTGRES_DB=${SQL_DATABASE:-devdb}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER:-devuser} -d ${SQL_DATABASE:-devdb} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile   # usa el Dockerfile que ya tenés (dev o prod según carpeta)
    image: backend-django:local
    restart: unless-stopped
    env_file:
      - ./dev.env
    depends_on:
      - db
    ports:
      - "8000:8000"
    command: >
      sh -c "./wait-for-db.sh db 5432 -- python manage.py migrate --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DEBUG=1
    volumes:
      - ./backend:/app:rw
      - static_volume:/app/static
      - media_volume:/app/media
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend:local
    restart: unless-stopped
    ports:
      - "8080:80"   # nginx servirá en 80 dentro del contenedor
    depends_on:
      - backend
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app:rw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  static_volume:
  media_volume:
